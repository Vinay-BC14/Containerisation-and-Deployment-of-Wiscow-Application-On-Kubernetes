1.System Health Monitoring Script:

import psutil
import shutil
import logging
from datetime import datetime

logging.basicConfig(filename='system_health.log', level=logging.INFO, format='%(asctime)s %(message)s')
CPU_THRESHOLD = 80 
MEMORY_THRESHOLD = 80 
DISK_THRESHOLD = 80

def check_cpu_usage():
    cpu_usage = psutil.cpu_percent(interval=1)
    if cpu_usage > CPU_THRESHOLD:
        alert(f"High CPU usage detected: {cpu_usage}%")
    return cpu_usage

def check_memory_usage():
    memory_info = psutil.virtual_memory()
    memory_usage = memory_info.percent
    if memory_usage > MEMORY_THRESHOLD:
        alert(f"High Memory usage detected: {memory_usage}%")
    return memory_usage

def check_disk_space():
    disk_info = shutil.disk_usage('/')
    disk_usage = (disk_info.used / disk_info.total) * 100
    if disk_usage > DISK_THRESHOLD:
        alert(f"Low Disk Space detected: {disk_usage}% used")
    return disk_usage

def check_running_processes():
    processes = [p.info for p in psutil.process_iter(['pid', 'name', 'cpu_percent'])]
    processes.sort(key=lambda x: x['cpu_percent'], reverse=True)
    return processes

def alert(message):
    print(message)
    logging.info(message)

def main():
    cpu_usage = check_cpu_usage()
    memory_usage = check_memory_usage()
    disk_usage = check_disk_space()
    processes = check_running_processes()

    logging.info(f"CPU Usage: {cpu_usage}%")
    logging.info(f"Memory Usage: {memory_usage}%")
    logging.info(f"Disk Usage: {disk_usage}%")
    logging.info(f"Top 5 Processes: {processes[:5]}")

    print(f"CPU Usage: {cpu_usage}%")
    print(f"Memory Usage: {memory_usage}%")
    print(f"Disk Usage: {disk_usage}%")
    print("Top 5 Processes:")
    for process in processes[:5]:
        print(process)
if __name__ == "__main__":
    main()




2.Application Health Checker:

import requests
import logging
from datetime import datetime

logging.basicConfig(filename='application_health.log', level=logging.INFO, format='%(asctime)s %(message)s')

APPLICATION_URL = 'http://example.com'  # Replace with your application's URL
SUCCESS_CODES = [200, 201, 202, 203, 204]

def check_application_status(url):
    try:
        response = requests.get(url, timeout=10)
        if response.status_code in SUCCESS_CODES:
            return 'up'
        else:
            return 'down'
    except requests.RequestException as e:
        logging.error(f"Error checking {url}: {e}")
        return 'down'

def log_status(status):
    if status == 'up':
        logging.info(f"The application is {status}.")
        print(f"The application is {status}.")
    else:
        logging.warning(f"The application is {status}.")
        print(f"The application is {status}.")

def main():
    status = check_application_status(APPLICATION_URL)
    log_status(status)

if __name__ == "__main__":
    main()
